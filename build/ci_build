#!/usr/bin/env python3

# Copyright 2024 The JAX Authors.
# Copyright 2025 Advanced Micro Devices, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import argparse
import os
from pathlib import Path
import subprocess
import sys
import datetime
import json
from pathlib import Path



def repo_root() -> Path:
    return Path(__file__).resolve().parent.parent
import tempfile


def dist_wheels(
    rocm_version,
    python_versions,
    xla_source_dir,
    rocm_build_job="",
    rocm_build_num="",
    therock_path=None,
    compiler="gcc",
):
    jax_plugin_dir = "jax_rocm_plugin"

    cmd = [
        "python3",
        "build/rocm/ci_build",
        "--rocm-version=%s" % rocm_version,
        "--python-versions=%s" % ",".join(python_versions),
        "--rocm-build-job=%s" % rocm_build_job,
        "--rocm-build-num=%s" % rocm_build_num,
        "--therock-path=%s" % therock_path,
        "--compiler=%s" % compiler,
    ]

    if xla_source_dir:
        xla_path = os.path.abspath(xla_source_dir)
        cmd.append("--xla-source-dir=%s" % xla_path)

    cmd.append("dist_wheels")
    subprocess.check_call(cmd, cwd=jax_plugin_dir)

def get_repo_commit_info(repo_path, repo_name):

    try:
        if not repo_path or not os.path.exists(repo_path):
            return {
                "commit": "unknown",
                "commit_title": "unknown", 
                "commit_date": "unknown"
            }
        
        if not os.path.exists(os.path.join(repo_path, ".git")):
            return {
                "commit": "unknown",
                "commit_title": "unknown",
                "commit_date": "unknown"
            }
        

        commit_cmd = ["git", "rev-parse", "HEAD"]
        commit_hash = subprocess.check_output(commit_cmd, cwd=repo_path).decode("utf8").strip()
        
        title_cmd = ["git", "log", "-1", "--pretty=format:%s"]
        commit_title = subprocess.check_output(title_cmd, cwd=repo_path).decode("utf8").strip()

        date_cmd = ["git", "log", "-1", "--pretty=format:%ci"]
        commit_date_raw = subprocess.check_output(date_cmd, cwd=repo_path).decode("utf8").strip()
        commit_date = commit_date_raw.split()[0] 
        
        return {
            "commit": commit_hash,
            "commit_title": commit_title,
            "commit_date": commit_date
        }
        
    except subprocess.CalledProcessError as ex:
        return {
            "commit": "unknown",
            "commit_title": "unknown",
            "commit_date": "unknown"
        }
    except Exception as ex:
        return {
            "commit": "unknown", 
            "commit_title": "unknown",
            "commit_date": "unknown"
        }

def _fetch_jax_metadata(xla_path, jax_path=".", plugin_path="."):
    
    repos = {
        "rocm/jax": {"path": Path(jax_path)},
        "rocm/xla": {"path": Path(xla_path) if xla_path else None},
        "rocm/rocm-jax": {"path": Path(plugin_path)},
    }

    metadata = {
        "build_timestamp": datetime.datetime.utcnow().isoformat(),
        "build_date": datetime.date.today().isoformat(),
    }

    for repo_id, cfg in repos.items():
        p = cfg["path"]
        info = get_repo_commit_info(str(p), repo_id) if p else {
            "commit": "unknown", "commit_title": "unknown", "commit_date": "unknown"
        }
        safe = repo_id.replace("/", "_").replace("-", "_")
        metadata[f"{safe}_commit"] = info["commit"]
        metadata[f"{safe}_commit_title"] = info["commit_title"]
        metadata[f"{safe}_commit_date"] = info["commit_date"]

    try:
        jax_version = subprocess.check_output(
            ["python3", "setup.py", "-V"],
            env={**os.environ, "JAX_RELEASE": "1"},
            cwd=str(jax_path),
            text=True,
        ).strip()
        metadata["jax_version"] = jax_version
    except Exception as ex:
        metadata["jax_version"] = "unknown"

    return metadata

def build_dockers(
    rocm_version: str,
    python_versions: str,
    rocm_build_job="",
    rocm_build_num="",
    therock_path=None,
    tag_base=None,
    docker_filters=None,
    metadata=None
):

    if metadata is None:
        metadata = {}

    dockerfiles = []
    docker_dir = "docker"
    for f in os.listdir(docker_dir):
        if f.startswith("Dockerfile"):
            path = os.path.join(docker_dir, f)

            if docker_filters:
                for substr in docker_filters:
                    if substr in f:
                        dockerfiles.append(path)

            else:
                dockerfiles.append(path)

    rocm_ver_tag = "rocm%s" % "".join(rocm_version.split("."))

    for dockerfile in dockerfiles:
        _, tag_suffix = dockerfile.split(".", 1)
        if tag_base:
            tag = "%s.%s.%s" % (tag_base, tag_suffix, rocm_ver_tag)
        else:
            tag = "%s.%s" % (tag_suffix, rocm_ver_tag)

        print("Building dockerfile=%r to tag=%r" % (dockerfile, tag))

        cmd = [
            "docker",
            "build",
            "-f",
            dockerfile,
            "--build-arg=ROCM_VERSION=%s" % rocm_version,
            "--build-arg=ROCM_BUILD_JOB=%s" % rocm_build_job,
            "--build-arg=ROCM_BUILD_NUM=%s" % rocm_build_num, 
            "--build-arg=ROCM_JAX_COMMIT=%s" % metadata.get('rocm_jax_commit', 'unknown'),
            "--build-arg=ROCM_JAX_COMMIT_TITLE=%s" % metadata.get('rocm_jax_commit_title', 'unknown'),
            "--build-arg=ROCM_JAX_COMMIT_DATE=%s" % metadata.get('rocm_jax_commit_date', 'unknown'),
            "--build-arg=ROCM_XLA_COMMIT=%s" % metadata.get('rocm_xla_commit', 'unknown'),
            "--build-arg=ROCM_XLA_COMMIT_TITLE=%s" % metadata.get('rocm_xla_commit_title', 'unknown'),
            "--build-arg=ROCM_XLA_COMMIT_DATE=%s" % metadata.get('rocm_xla_commit_date', 'unknown'),
            "--build-arg=ROCM_ROCM_JAX_COMMIT=%s" % metadata.get('rocm_rocm_jax_commit', 'unknown'),
            "--build-arg=ROCM_ROCM_JAX_COMMIT_TITLE=%s" % metadata.get('rocm_rocm_jax_commit_title', 'unknown'),
            "--build-arg=ROCM_ROCM_JAX_COMMIT_DATE=%s" % metadata.get('rocm_rocm_jax_commit_date', 'unknown'),
            "--build-arg=BUILD_DATE=%s" % metadata.get('build_date', ''),
            "--build-arg=BUILD_TIMESTAMP=%s" % metadata.get('build_timestamp', ''),
            "--tag=%s" % tag,
        ]

        if therock_path and Path(therock_path).exists():
            cmd.append("--build-arg=THEROCK_PATH=/tmp/therock/")
            cmd.append("--build-context=therock=%s" % therock_path)
        else:
            if therock_path:
                cmd.append("--build-arg=THEROCK_PATH=%s" % therock_path)
            print(tempfile.tempdir)
            temp_path = Path(tempfile.mkdtemp()) / "therock"
            temp_path.mkdir(exist_ok=True)
            cmd.append("--build-context=therock=%s" % temp_path)

        # context dir
        cmd.append(".")

        subprocess.check_call(cmd)

def print_docker_build_info(image_name):
    """Extract and print build information from Docker image labels."""
    try:
        # Get Docker labels
        result = subprocess.run(
            ["docker", "inspect", "--format", "{{json .Config.Labels}}", image_name],
            capture_output=True, 
            text=True,
            check=True
        )
        
        labels = json.loads(result.stdout.strip())
        
      
        print("=" * 70)
        print("ROCm JAX Docker Build Information")
        print("=" * 70)
        print(f"Build Date : {labels.get('com.amdgpu.build_date', 'unknown')}")
        print()
        

        jax_commit = labels.get('com.amdgpu.rocm_jax.commit', 'unknown')
        jax_date = labels.get('com.amdgpu.rocm_jax.commit_date', 'unknown')
        jax_title = labels.get('com.amdgpu.rocm_jax.commit_title', 'unknown')
        
        print(f"rocm/jax Commit Hash : {jax_commit} ({jax_date})")
        if jax_title != 'unknown':
            print(f"rocm/jax Commit Title : {jax_title}")
            print()
        

        xla_commit = labels.get('com.amdgpu.rocm_xla.commit', 'unknown')
        xla_date = labels.get('com.amdgpu.rocm_xla.commit_date', 'unknown')
        xla_title = labels.get('com.amdgpu.rocm_xla.commit_title', 'unknown')
        
        print(f"rocm/xla Commit Hash : {xla_commit} ({xla_date})")
        if xla_title != 'unknown':
            print(f"rocm/xla Commit Title : {xla_title}")
            print()

        plugin_commit = labels.get('com.amdgpu.rocm_rocm_jax.commit', 'unknown')
        plugin_date = labels.get('com.amdgpu.rocm_rocm_jax.commit_date', 'unknown')
        plugin_title = labels.get('com.amdgpu.rocm_rocm_jax.commit_title', 'unknown')
        
        print(f"rocm/rocm-jax Commit Hash: {plugin_commit} ({plugin_date})")
        if plugin_title != 'unknown':
            print(f"rocm/rocm-jax Commit Title: {plugin_title}")
            print()

        
        print("=" * 70)
        print()
        
    except subprocess.CalledProcessError:
        print(f"Failed to inspect Docker image: {image_name}")
    except json.JSONDecodeError:
        print(f"Failed to parse Docker labels")
    except Exception as e:
        print(f" Error: {e}")


def test(image_name, test_cmd=None):
    """Run unit tests like CI would inside a JAX image."""

    print_docker_build_info(image_name)

    if not test_cmd:
        test_cmd = "./build/rocm/run_single_gpu.py -c && ./build/rocm/run_multi_gpu.sh"

    gpu_args = [
        "--device=/dev/kfd",
        "--device=/dev/dri",
        "--group-add",
        "video",
        "--cap-add=SYS_PTRACE",
        "--security-opt",
        "seccomp=unconfined",
        "--shm-size",
        "16G",
    ]

    cmd = [
        "docker",
        "run",
        "--rm",
    ]

    if os.isatty(sys.stdout.fileno()):
        cmd.append("-it")

    # NOTE(mrodden): we need jax source dir for the unit test code only,
    # JAX and jaxlib are already installed from wheels
    mounts = [
        "-v",
        os.path.abspath("./jax") + ":/jax",
    ]

    cmd.extend(mounts)
    cmd.extend(gpu_args)

    container_cmd = "cd /jax && %s" % test_cmd

    cmd.append(image_name)
    cmd.extend(
        [
            "bash",
            "-c",
            container_cmd,
        ]
    )

    subprocess.check_call(cmd)


def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument(
        "--base-docker",
        default="",
        help="Argument to override base docker in dockerfile",
    )

    p.add_argument(
        "--python-versions",
        type=lambda x: x.split(","),
        default="3.12",
        help="Comma separated list of CPython versions to build wheels for",
    )

    p.add_argument(
        "--rocm-version",
        default="6.1.1",
        help="ROCm version used for building wheels, testing, and installing into Docker image",
    )

    p.add_argument(
        "--rocm-build-job",
        default="",
        help="ROCm build job for development ROCm builds. Requires --rocm-build-num to also be set. Is mutually exclusive with --therock-path.",
    )

    p.add_argument(
        "--rocm-build-num",
        default="",
        help="ROCm build number for development ROCm builds. Requires --rocm-build-job to also be set. Is mutually exclusive with --therock-path.",
    )

    p.add_argument(
        "--therock-path",
        default="",
        help="URL to download a tarball of TheRock, or a local directory name pointing to a tarball or directory containing TheRock. This argument is mutually exclusive with --rocm-build-job and --rocm-build-num.",
    )

    p.add_argument(
        "--xla-source-dir",
        help="Path to XLA source to use during jaxlib build, instead of builtin XLA",
    )

    p.add_argument(
        "--compiler",
        choices=["gcc", "clang"],
        default="clang",
        help="Compiler backend to use when compiling jax/jaxlib",
    )

    subp = p.add_subparsers(dest="action", required=True)

    dwp = subp.add_parser("dist_wheels")

    dtestp = subp.add_parser("test_docker")
    dtestp.add_argument("--docker-build-only", action="store_true")
    dtestp.add_argument(
        "--jax-version",
        default="latest",
        help="JAX version that will be install via pip in test image.",
    )

    bdp = subp.add_parser("build_dockers")
    bdp.add_argument(
        "--filter",
        "-f",
        type=str,
        help="Comma separated strings to filter Dockerfiles to build. Substring match",
        default="",
    )

    testp = subp.add_parser("test")
    testp.add_argument(
        "--test-cmd", help="Command which will be run inside the test container"
    )
    testp.add_argument("image_name")

    args = p.parse_args()

    # Make sure that the user hasn't tried to set both --therock-path and either --rocm-build-job or --rocm-build-num
    if args.therock_path and (args.rocm_build_job or args.rocm_build_num):
        p.error("You cannot set both --therock-path and --rocm-build-job/--rocm-build-num.")

    # Make sure that the user has set both a build job and build number if trying to get ROCm from the mainline build
    if (args.rocm_build_job and not args.rocm_build_num) or (args.rocm_build_num and not args.rocm_build_job):
        p.error("You must set both --rocm-build-num and --rocm-build-job, not just one")

    return args


def main():
    args = parse_args()
    root = repo_root()  
    jax_path = root / "jax"
    xla_candidate = root / "xla"
    xla_path = xla_candidate if xla_candidate.exists() else None
    plugin_path = root
    if args.action == "dist_wheels":

        dist_wheels(
            args.rocm_version,
            args.python_versions,
            args.xla_source_dir,
            args.rocm_build_job,
            args.rocm_build_num,
            compiler=args.compiler,
        )

    if args.action == "build_dockers":
        filters = args.filter.split(",")

        md = _fetch_jax_metadata(
            xla_path=xla_path,               
            jax_path=str(jax_path),
            plugin_path=str(plugin_path),
    )

        build_dockers(
            rocm_version=args.rocm_version,
            python_versions=args.python_versions,
            rocm_build_job=args.rocm_build_job,
            rocm_build_num=args.rocm_build_num,
            therock_path=args.therock_path,
            docker_filters=filters,
            metadata=md
        )

    elif args.action == "test_docker":
        image_name = "rocm/jax-test"

        if not os.path.exists("./jax"):
            print(
                "Integration tests require a local 'jax' repo for jax test code.",
                file=sys.stderr,
            )
            sys.exit(-1)

        build_test_docker(
            args.rocm_version,
            args.python_versions[0],
            rocm_build_job=args.rocm_build_job,
            rocm_build_num=args.rocm_build_num,
            tag=image_name,
            jax_version=args.jax_version,
        )

        if args.docker_build_only:
            return

    elif args.action == "test":
        test(args.image_name, args.test_cmd)


if __name__ == "__main__":
    main()
